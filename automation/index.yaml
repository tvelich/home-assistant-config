- alias: on_sunset
  trigger:
    platform: sun
    event: sunset
    offset: '00:15:00'
  action:
    service: script.outside_core_lights_on
- alias: on_sunrise
  trigger:
    platform: sun
    event: sunrise
    offset: '-00:15:00'
  action:
    service: script.outside_lights_off
- alias: on_time_11pm
  trigger:
    platform: time
    at: '23:00:00'
  action:
    service: script.fade_to_dim_front_yard
- alias: on_close_door
  trigger:
    - entity_id: binary_sensor.front_door_open
      platform: state
      to: 'off'
      for:
        minutes: 10
    - entity_id: binary_sensor.sunroom_door_open
      platform: state
      to: 'off'
      for:
        minutes: 10
    - entity_id: binary_sensor.deck_door_open
      platform: state
      to: 'off'
      for:
        minutes: 10
    - entity_id: binary_sensor.garage_door_open
      platform: state
      to: 'off'
      for:
        minutes: 10
  action:
    service: lock.lock
    data_template:
      entity_id: >
        {% if trigger.entity_id == 'binary_sensor.deck_door_open' %}
          lock.deck_door
        {% elif trigger.entity_id == 'binary_sensor.front_door_open' %}
          lock.front_door
        {% elif trigger.entity_id == 'binary_sensor.garage_door_open' %}
          lock.garage_door
        {% elif trigger.entity_id == 'binary_sensor.sunroom_door_open' %}
          lock.sunroom_door
        {% endif %}
- alias: on_trigger_for_backyard_light
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.sunroom_door_open
        - binary_sensor.deck_door_open
        - binary_sensor.garage_door_open
        - binary_sensor.backyard_camera_person_detected
        - binary_sensor.deck_camera_person_detected
        - light.backyard
      to: 'on'
  condition:
    condition: state
    entity_id: sun.sun
    state: below_horizon
  action:
    - service: python_script.light_turn_on
      data:
        entity_id: light.backyard
    - service: script.backyard_timer_start
- alias: on_backyard_lights_idle
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.backyard_lights
  action:
    service: python_script.light_turn_off
    data:
      entity_id: light.backyard
- alias: on_downstairs_bathroom_lights_idle
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.downstairs_bathroom_lights
  action:
    service: light.turn_off
    data:
      entity_id: light.bathroom_downstairs
      transition: >
        {% if is_state('sensor.sleep_mode', 'partial') or is_state('sensor.sleep_mode', 'on') %}
          0
        {% else %}
          {{ states('input_number.default_light_transition_time') | float }}
        {% endif %}
- alias: on_upstairs_bathroom_lights_idle
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.upstairs_bathroom_lights
  action:
    service: light.turn_off
    data:
      entity_id: light.bathroom_upstairs
      transition: >
        {% if is_state('sensor.sleep_mode', 'partial') or is_state('sensor.sleep_mode', 'on') %}
          0
        {% else %}
          {{ states('input_number.default_light_transition_time') | float }}
        {% endif %}
- alias: on_brighten_front_yard_idle
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.brighten_front_yard
  condition:
    condition: or
    conditions:
      - condition: time
        after: '23:00:00'
      - condition: sun
        before: sunrise
        before_offset: '-00:25:00'
  action:
    service: script.fade_to_dim_front_yard
- alias: on_home
  trigger:
    entity_id: binary_sensor.home
    platform: state
    to: 'on'
    from: 'off'
  action:
    - service: alarm_control_panel.alarm_disarm
      data:
        entity_id: alarm_control_panel.abode_alarm
    - service: script.inside_lights_on
    - service: nest.set_away_mode
      data:
        away_mode: home
- alias: on_away
  trigger:
    entity_id: binary_sensor.home
    platform: state
    to: 'off'
    from: 'on'
  action:
    - service: alarm_control_panel.alarm_arm_away
      data:
        entity_id: alarm_control_panel.abode_alarm
    - service: script.inside_lights_off
    - service: nest.set_away_mode
      data:
        away_mode: away
- alias: on_nano_1_pressed
  trigger:
    - platform: event
      event_type: zwave.scene_activated
      event_data:
        entity_id: zwave.aeotec_limited_zwa003_nanomote_quad
        scene_data: 7680
        scene_id: 1
  action:
    service: script.inside_lights_on
- alias: on_nano_2_pressed
  trigger:
    - platform: event
      event_type: zwave.scene_activated
      event_data:
        entity_id: zwave.aeotec_limited_zwa003_nanomote_quad
        scene_data: 7680
        scene_id: 2
  action:
    service: python_script.light_turn_on
    data:
      entity_id: light.inside_core
      brightness: 125
- alias: on_nano_3_pressed
  trigger:
    - platform: event
      event_type: zwave.scene_activated
      event_data:
        entity_id: zwave.aeotec_limited_zwa003_nanomote_quad
        scene_data: 7680
        scene_id: 3
  action:
    service: script.inside_lights_off
- alias: on_nano_4_pressed
  trigger:
    - platform: event
      event_type: zwave.scene_activated
      event_data:
        entity_id: zwave.aeotec_limited_zwa003_nanomote_quad
        scene_data: 7680
        scene_id: 4
  action:
    service: media_player.media_play_pause
    data:
      entity_id: media_player.living_room_google_tv
- alias: on_trigger_for_downstairs_bathroom_lights
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.downstairs_bathroom_motion
        - light.bathroom_downstairs
      to: 'on'
  action:
    - service: light.turn_on
      data:
        entity_id: light.bathroom_downstairs
        brightness_pct: >
          {% if is_state('sensor.sleep_mode', 'on') %}
            1
          {% else %}
            100
          {% endif %}
        transition: "{{ states('input_number.default_light_transition_time') | float }}"
    - service: timer.start
      data:
        entity_id: timer.downstairs_bathroom_lights
        duration: >
          {% if is_state('sensor.sleep_mode', 'on') %}
            00:01:00
          {% else %}
            00:15:00
          {% endif %}
- alias: on_trigger_for_upstairs_bathroom_lights
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.upstairs_bathroom_motion
        - light.bathroom_upstairs
      to: 'on'
  action:
    - service: light.turn_on
      data:
        entity_id: light.bathroom_upstairs
        brightness_pct: >
          {% if is_state('sensor.sleep_mode', 'partial') or is_state('sensor.sleep_mode', 'on') %}
            1
          {% else %}
            100
          {% endif %}
        transition: "{{ states('input_number.default_light_transition_time') | float }}"
    - service: timer.start
      data:
        entity_id: timer.upstairs_bathroom_lights
        duration: >
          {% if is_state('sensor.sleep_mode', 'on') %}
            00:01:00
          {% else %}
            00:15:00
          {% endif %}
- alias: on_home_assistant_start
  trigger:
    platform: homeassistant
    event: start
  action:
    - service: timer.start
      data:
        entity_id: timer.downstairs_bathroom_lights
        duration: '00:15:00'
    - service: timer.start
      data:
        entity_id: timer.upstairs_bathroom_lights
        duration: '00:15:00'
    - service: script.backyard_timer_start
    - service: timer.start
      data:
        entity_id: timer.brighten_front_yard
        duration: '00:05:00'
- alias: on_trigger_to_brighten_front_yard
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.front_door_open
        - binary_sensor.porch_camera_motion_detected
        - binary_sensor.garage_camera_motion_detected
      to: 'on'
    - platform: state
      entity_id: cover.garage_lift_door
      to: 'open'
  condition:
    condition: or
    conditions:
      - condition: time
        after: '23:00:00'
      - condition: sun
        before: sunrise
        before_offset: '-00:25:00'
  action:
    - service: python_script.light_turn_on
      data:
        entity_id: light.front_yard
        preserve_color: true
    - service: timer.start
      data:
        entity_id: timer.brighten_front_yard
        duration: '00:05:00'
- alias: on_door_left_open
  trigger:
    - entity_id: binary_sensor.front_door_open
      platform: state
      to: 'on'
      for:
        minutes: 5
    - entity_id: binary_sensor.sunroom_door_open
      platform: state
      to: 'on'
      for:
        minutes: 5
    - entity_id: binary_sensor.deck_door_open
      platform: state
      to: 'on'
      for:
        minutes: 5
    - entity_id: binary_sensor.garage_door_open
      platform: state
      to: 'on'
      for:
        minutes: 5
    - entity_id: cover.garage_lift_door
      platform: state
      to: 'open'
      for:
        minutes: 10
  action:
    service: script.post_slack_message
    data_template:
      message: >
        {% if trigger.entity_id == 'binary_sensor.deck_door_open' %}
          Deck door is still open!
        {% elif trigger.entity_id == 'binary_sensor.front_door_open' %}
          Front door is still open!
        {% elif trigger.entity_id == 'binary_sensor.garage_door_open' %}
          Garage door is still open!
        {% elif trigger.entity_id == 'binary_sensor.sunroom_door_open' %}
          Sunroom door is still open!
        {% elif trigger.entity_id == 'cover.garage_lift_door' %}
          Garage lift door is still open!
        {% endif %}
- alias: on_door_left_unlocked
  trigger:
    - entity_id: lock.front_door
      platform: state
      to: 'unlocked'
      for:
        minutes: 20
    - entity_id: lock.deck_door
      platform: state
      to: 'unlocked'
      for:
        minutes: 20
    - entity_id: lock.sunroom_door
      platform: state
      to: 'unlocked'
      for:
        minutes: 20
    - entity_id: lock.garage_door
      platform: state
      to: 'unlocked'
      for:
        minutes: 20
  action:
    service: script.post_slack_message
    data_template:
      message: >
        {% if trigger.entity_id == 'lock.deck_door' %}
          Deck door is still unlocked!
        {% elif trigger.entity_id == 'lock.front_door' %}
          Front door is still unlocked!
        {% elif trigger.entity_id == 'lock.garage_door' %}
          Garage door is still unlocked!
        {% elif trigger.entity_id == 'lock.sunroom_door' %}
          Sunroom door is still unlocked!
        {% endif %}
- alias: on_water_detected
  trigger:
    - platform: time_pattern
      seconds: '/15'
    - entity_id: binary_sensor.downstairs_bathroom_water_detected
      platform: state
      to: 'on'
    - entity_id: binary_sensor.upstairs_bathroom_water_detected
      platform: state
      to: 'on'
    - entity_id: binary_sensor.main_valve_water_detected
      platform: state
      to: 'on'
    - entity_id: binary_sensor.garage_sink_water_detected
      platform: state
      to: 'on'
    - entity_id: binary_sensor.laundry_room_water_detected
      platform: state
      to: 'on'
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: 'binary_sensor.downstairs_bathroom_water_detected'
        state: 'on'
      - condition: state
        entity_id: 'binary_sensor.upstairs_bathroom_water_detected'
        state: 'on'
      - condition: state
        entity_id: 'binary_sensor.main_valve_water_detected'
        state: 'on'
      - condition: state
        entity_id: 'binary_sensor.garage_sink_water_detected'
        state: 'on'
      - condition: state
        entity_id: 'binary_sensor.laundry_room_water_detected'
        state: 'on'
  action:
    service: script.post_slack_message
    data_template:
      message: >
        {% if states('binary_sensor.downstairs_bathroom_water_detected') == 'on' %}
          Water detected in downstairs bathroom!
        {% elif states('binary_sensor.upstairs_bathroom_water_detected') == 'on' %}
          Water detected in upstairs bathroom!
        {% elif states('binary_sensor.main_valve_water_detected') == 'on' %}
          Water detected at main valve!
        {% elif states('binary_sensor.garage_sink_water_detected') == 'on' %}
          Water detected at garage sink!
        {% elif states('binary_sensor.laundry_room_water_detected') == 'on' %}
          Water detected in laundry room!
        {% else %}
          Water detected!
        {% endif %}
- alias: on_mailbox_motion
  trigger:
    entity_id: binary_sensor.mailbox_motion
    platform: state
    to: 'on'
  action:
    service: script.post_slack_message
    data:
      message: You've got mail!
- alias: on_poor_fountain_conditions_change
  trigger:
    platform: state
    entity_id: binary_sensor.poor_fountain_conditions
  action:
    service_template: >
      {% if trigger.to_state.state == 'on' %}
        switch.turn_off
      {% else %}
        switch.turn_on
      {% endif %}
    data:
      entity_id: switch.fountain
- alias: on_interval_while_sleeping
  trigger:
    platform: time_pattern
    minutes: 55
  condition:
    condition: state
    entity_id: sensor.sleep_mode
    state:
      - 'on'
      - 'partial'
  action:
    service: script.play_sleep_sounds
- alias: on_kitchen_chromecast_play_begin
  trigger:
    platform: state
    entity_id: media_player.kitchen_chromecast
    to: 'playing'
  action:
    service: switch.turn_on
    data:
      entity_id: switch.kitchen_media
- alias: on_kitchen_chromecast_cast_stop
  trigger:
    platform: state
    entity_id: media_player.kitchen_chromecast
    to: 'off'
  action:
    service: switch.turn_off
    data:
      entity_id: switch.kitchen_media
- alias: on_handle_fireplace_trigger
  trigger:
    - platform: time_pattern
      minutes: "/1"
  condition:
    condition: state
    entity_id: input_boolean.fireplace_enabled
    state: 'on'
  action:
    - service: python_script.handle_fireplace
- alias: on_tom_phone_battery_level_change
  trigger:
    platform: state
    entity_id: sensor.tom_phone_battery
  action:
    service_template: >
      {% set battery_level = states('sensor.tom_phone_battery') | float %}
      {% if battery_level and battery_level < 65 %}
        switch.turn_on
      {% elif battery_level and battery_level > 80 %}
        switch.turn_off
      {% else %}
        script.noop
      {% endif %}
    data:
      entity_id: switch.living_room_charger
